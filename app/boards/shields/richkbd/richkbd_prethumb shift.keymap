/*
 * Copyright (c) 2021 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define DEFAULT 0
#define MDA     1
#define NAV     2
#define MOU     3
#define SYM     4
#define NUM     5
#define FUN     6

/* Combo helper, to DRY up combo definitions
 * usage: COMBO(vol_up, &kp C_VOL_UP,  9 19) */
#define FAST_COMBO(name, keypress, keypos) \
    combo_##name {                    \
        layers = <0>;                 \
        timeout-ms = <25>;            \
        bindings = <keypress>;        \
        key-positions = <keypos>;     \
    };

#define SLOW_COMBO(name, keypress, keypos) \
    combo_##name {                    \
        layers = <0>;                 \
        timeout-ms = <75>;            \
        bindings = <keypress>;        \
        key-positions = <keypos>;     \
    };

/* Macro helper to DRY up simple keypress macros
 * usage: MACRO(dir_up, &kp DOT &kp DOT &kp FSLH) */
#define MACRO(name, keys)                  \
    name: name##_macro {                   \
        label = #name;                     \
        compatible = "zmk,behavior-macro"; \
        #binding-cells = <0>;              \
        wait-ms = <1>;                     \
        tap-ms = <1>;                      \
        bindings = <keys>;                 \
    };

/* This is for snoyer's capslock based caps_word */
// &caps_word {
//   disable-on-keys = <SPACE TAB ENTER PERIOD>;
// };


/ {

      behaviors {
        hrm: home_row_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SLOW_HOME_ROW_MODS";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <240>;
            bindings = <&kp>, <&kp>;
        };
        
        sh_mod: shift_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "SHIFT_MODS";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <240>;
            bindings = <&kp>, <&kp>;
        };

        qlt: layer_tap_with_quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_LAYER_TAP";
            #binding-cells = <2>;
            flavor = "balanced";
            tapping-term-ms = <250>;
            quick-tap-ms = <240>;
            bindings = <&mo>, <&kp>;
        };

    };

    /* Combo key positions
    0  1  2  3  4  5        6  7  8  9  10 11
    12 13 14 15 16 17       18 19 20 21 22 23
    24 25 26 27 28 29       30 31 32 33 34 35
             36 37 38       39 40 41         */

   combos {
        compatible = "zmk,combos";
        SLOW_COMBO(combo_lbkt, &kp LBKT, 1 2)
        SLOW_COMBO(combo_rbkt, &kp RBKT, 9 10)
        SLOW_COMBO(combo_lpar, &kp LPAR, 2 3)
        SLOW_COMBO(combo_rpar, &kp RPAR, 8 9)
        SLOW_COMBO(combo_lbrc, &kp LBRC, 3 4)
        SLOW_COMBO(combo_rbrc, &kp RBRC, 7 8)
     };

    macros {
        MACRO(scrn_shot, &kp LS(LG(N4)))  // Mac screenshot
        MACRO(zm_mute, &kp LS(LG(A)))     // Zoom mute
        MACRO(zm_cam, &kp LS(LG(V)))      // Zoom cam on/off
        MACRO(dsktp_right, &kp LC(RIGHT)) // Mac desktop next
        MACRO(dsktp_left, &kp LC(LEFT))   // Mac desktop previous
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            bindings = <
&scrn_shot    &kp Q           &kp W           &kp F           &kp P              &kp B          /**/     &kp J           &kp L           &kp U           &kp Y           &kp SQT            &zm_mute
&kp LCTRL     &hrm LCTRL A    &hrm LALT R     &hrm LCMD S     &sh_mod LSHIFT T   &kp G          /**/     &kp M           &sh_mod RSHIFT N &hrm RCMD E    &hrm RALT I     &hrm RCTRL O       &zm_cam
&dsktp_left   &kp Z           &kp X           &kp C           &kp D              &kp V          /**/     &kp K           &kp H           &kp COMMA       &kp DOT         &kp FSLH           &dsktp_right
                                              &qlt MDA ESC    &qlt NAV SPACE     &qlt MOU TAB   /**/     &qlt SYM RET    &qlt NUM BSPC   &qlt FUN DEL
            >;
        };

        media_layer {
            bindings = <
    &none       &none     &none     &none     &none       &none    /**/   &none      &none        &none     &none    &none         &none 
    &none       &none     &none     &none     &none       &none    /**/   &none      &none        &none     &none    &kp C_BRI_UP  &none 
    &none       &none     &none     &none     &none       &none    /**/   &none      &none        &none     &none    &kp C_BRI_DN  &none 
                                    &none     &none       &none    /**/   &kp C_MUTE &kp C_VOL_DN &kp C_VOL_UP
            >;
        };

        nav_layer {
            bindings = <
    &bootloader &bt BT_CLR &none    &none     &none       &none    /**/   &none      &none     &none     &none    &none      &none 
    &none       &kp LCTRL &kp LALT  &kp LCMD  &kp LSHIFT  &none    /**/   &caps_word &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &none 
    &dsktp_left &none     &none     &none     &none       &none    /**/   &kp INS    &kp HOME  &kp PGDN  &kp PGUP &kp END    &dsktp_right
                                    &none     &none       &none    /**/   &none      &none     &none 
            >;
        };

        mouse_layer {
            bindings = <
    &none       &none     &none     &none     &none       &none    /**/   &none    &none     &none     &none    &none      &none 
    &none       &kp LCTRL &kp LALT  &kp LCMD  &kp LSHIFT  &none    /**/   &none    &kp LEFT  &kp DOWN  &kp UP   &kp RIGHT  &none 
    &none       &none     &none     &none     &none       &none    /**/   &kp INS  &kp HOME  &kp PGDN  &kp PGUP &kp END    &none 
                                    &none     &none       &none    /**/   &none    &none     &none 
            >;
        };

        symbol_layer {
            bindings = <
    &none         &kp LBRC  &kp AMPS  &kp STAR  &kp LPAR    &kp RBRC  /**/   &none     &none      &none     &none     &none      &none 
    &none         &kp COLON &kp DLLR  &kp PRCNT &kp CARET   &kp PLUS  /**/   &none     &kp RSHIFT &kp RCMD  &kp RALT  &kp RCTRL  &none 
    &kp LG(RBKT)  &kp TILDE &kp EXCL  &kp AT    &kp HASH    &kp PIPE  /**/   &none     &none      &none     &none     &none      &kp LG(RBKT)
                                      &kp LPAR  &kp RPAR    &kp UNDER /**/   &none     &none      &none 
            >;
        };

        number_layer {
            bindings = <
    &none            &kp LBKT  &kp N7    &kp N8    &kp N9      &kp RBKT  /**/   &none     &none      &none     &none     &none      &none 
    &none            &kp SEMI  &kp N4    &kp N5    &kp N6      &kp EQUAL /**/   &none     &kp RSHIFT &kp RCMD  &kp RALT  &kp RCTRL  &none 
    &kp LA(LG(LEFT)) &kp GRAVE &kp N1    &kp N2    &kp N3      &kp BSLH  /**/   &none     &none      &none     &none     &none      &kp LA(LG(RIGHT))
                                         &kp N0    &kp DOT     &kp MINUS /**/   &none     &none      &none 
            >;
        };

        function_layer {
            bindings = <
    &none     &kp F12   &kp F7    &kp F8    &kp F9      &none    /**/   &none    &none     &none     &none    &none      &none 
    &none     &kp F11   &kp F4    &kp F5    &kp F6      &none    /**/   &none    &none     &none     &none    &none      &none 
    &none     &kp F10   &kp F1    &kp F2    &kp F3      &none    /**/   &none    &none     &none     &none    &none      &none 
                                  &none     &none       &none    /**/   &none    &none     &none 
            >;
        };

    };
};
